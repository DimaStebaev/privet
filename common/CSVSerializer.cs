//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Common
{
    public class CSVSerializer : ISerializer
    {
        #region Private Members
        private string mDelimeter = ",";
        #endregion

        #region properties

        public string title
        {
            get
            {
                throw new System.NotImplementedException();
            }
        }

        public string name
        {
            get
            {
                throw new System.NotImplementedException();
            }
        }

        public string extension { 
            get
            {
                throw new System.NotImplementedException();
            }
        }

        #endregion

        /// <summary>
        /// Writes Function f to output CSV file
        /// </summary>
        /// <param name="f">Function to write</param>
        /// <param name="filename">Output file path</param>
        public virtual void serialize(Function f, string filename)
        {
            //Check existence 
            if (!File.Exists(filename))
            {
                File.Create(filename);
            }

            StreamWriter fileStream = new StreamWriter(filename);

            string lineToWrite = String.Empty;

            for (int i = 0; i < f.Length; i++)
            {
                lineToWrite = f[i].ToString() + "," + f.getValue(f[i]);
                fileStream.WriteLine(lineToWrite);
            }

            fileStream.Close();
        }

        /// <summary>
        /// Reads Function from CSV file. Each line in this file must have format "x,y".
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Function</returns>
        public virtual Function deserialize(string filename)
        {
            //Check file existence
            if (File.Exists(filename))
            {
                Function functionToReadIn = new Function();
                StreamReader fileStream = new StreamReader(filename);
                string lineToRead = String.Empty;
                string[] values = null;
                char[] separators = { ',' };
                double currentX = 0.0;
                double currentY = 0.0;

                var xList = new List<double>();
                var yList = new List<double>();


                while (!fileStream.EndOfStream)
                {
                    lineToRead = fileStream.ReadLine();
                    values = lineToRead.Split(separators);
                    //Check only strings with two double values
                    if ((values.Length == 2) && Double.TryParse(values[0], out currentX) && Double.TryParse(values[1], out currentY))
                    {
                        xList.Add(currentX);
                        yList.Add(currentY);
                    }
                    else
                    {
                        //If line couldn't be parsed -> throw exception
                        fileStream.Close();
                        throw new InvalidDataException("File corrupted.");
                    }
                }
                fileStream.Close();

                //Find maximum and minimum x values
                var minX = xList.Min();
                var maxX = xList.Max();
                //Calculate step
                var step = (maxX - minX) / (xList.Count - 1);
                //And setup output function
                functionToReadIn.setup(minX, maxX, step);
                //Populate all values
                for (int i = 0; i < xList.Count; i++)
                {
                    functionToReadIn.setValue(xList[i], yList[i]);
                }
                return functionToReadIn;

            }
            else
            {
                throw new FileNotFoundException("Filename is incorrect.");
            }
        }

        public virtual void initialize()
        {
            throw new System.NotImplementedException();
        }

        public bool checkParametersList(IList<Object> parameters)
        {
            throw new System.NotImplementedException();
        }

        public void setup(IList<Object> parameters)
        {
            throw new System.NotImplementedException();
        }

        public IList<Parameter> getParametersList()
        {
            throw new System.NotImplementedException();
        }        
    }
}
