//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Common
{
    /// <summary>
    /// Содержит метаданные о параметре
    /// </summary>
    public abstract class Parameter
    {
        /// <summary>
        /// Тип значения параметра
        /// </summary>
        public virtual Type type
        {
            get;
            private set;
        }

        /// <summary>
        /// Название параметра, используется в UI
        /// </summary>
        public virtual string title
        {
            get;
            private set;
        }

        /// <summary>
        /// Значение параметра по умолчанию
        /// </summary>
        public virtual Object defaultValue
        {
            get;
            private set;
        }

        /// <summary>
        /// Конструктор
        /// </summary>
        /// <param name="type">Тип значения параметра</param>
        /// <param name="title">Название параметра</param>
        /// <param name="defaultValue">Значение параметра по умолчанию</param>
        public Parameter(Type type, string title, Object defaultValue)
        {
            this.type = type;
            this.title = title;
            this.defaultValue = defaultValue;
        }

        /// <summary>
        /// Возвращает вещественный параметр
        /// </summary>
        /// <param name="title">Название параметра</param>
        /// <param name="defaultValue">Значение по умолчанию</param>
        /// <returns>Вещественный параметр</returns>
        public static Parameter Double(string title, double defaultValue)
        {
            return new DoubleParameter(title, defaultValue);
        }        

        /// <summary>
        /// Проверяет, возмодно ли преобразовать строку в значение параметра
        /// </summary>
        /// <param name="value">Строка со значением параметра</param>
        /// <returns>True, если возможно, False, если не возможно</returns>        
        public abstract bool validate(string value);

        /// <summary>
        /// Превращает строку в значение параметра
        /// </summary>
        /// <param name="value">Строка со значением</param>
        /// <returns>Значение параметра</returns>
        public abstract Object parse(string value);

        /// <summary>
        /// Вещественный параметр
        /// </summary>
        private class DoubleParameter : Parameter
        {
            public DoubleParameter(string title, double defaultValue)
                :base(typeof(double), title, defaultValue)
            {
               
            }
            public override bool validate(string value)
            {
                value = modifyDecimalSeparator(value);
                double x;
                return double.TryParse(value, out x);
            }

            public override object parse(string value)
            {
                value = modifyDecimalSeparator(value);
                if (!validate(value)) throw new ArgumentException("Argument value " + value + " can not be parsed");

                return double.Parse(value);
            }

            private string modifyDecimalSeparator(string str)
            {
                StringBuilder sb = new StringBuilder(str);

                char sep = Convert.ToChar(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                sb.Replace('.', sep);
                sb.Replace(',', sep);

                return sb.ToString();
            }
        }
    }    
}

