//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Processor;

namespace EnergyCalculation
{
    /// <summary>
    /// Модуль подсчета удельной енергии
    /// Реализованный методом Монте-Карло
    /// </summary>
    public class EnergyCalculation : ScalarProcessor
    {
        private Random rand = new Random();
        private int maxCount = 5000000;         // Максимальное количество итераций
        private double maxTime = 50;           // Максимальное время работы, в миллисекундах

        public override string title
        {
            get
            {
                return "Удельная энергия";
            }
        }
        public override string name
        {
            get
            {
                return "EnergyCalculation";
            }
        }     
 
        /// <summary>
        /// Вычисление интеграла
        /// </summary>
        /// <param name="f">Функция для интегрирования</param>
        /// <returns>Удельную енергию, значение интеграла</returns>
        protected override double processFunction(Common.Function f)
        {
            double energy = 0;
            int i = 0;
            DateTime start = DateTime.Now;
            TimeSpan time = DateTime.Now - start;

            while(i < maxCount && time.Milliseconds < maxTime)
            {
                double x = f.minX + (f.maxX-f.minX) * rand.NextDouble();
                energy += Math.Pow(f.getValue(x), 2);
                i++;
                if (i % 1000 == 0)
                    time = DateTime.Now - start;
            }
          
            return energy / i;
        }
    }
}

