//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using Common;
using Microsoft.Research.DynamicDataDisplay;
using Microsoft.Research.DynamicDataDisplay.DataSources;

namespace Processor
{
    public abstract class ChartProcessor : IProcessor
    {
        public abstract string title { get; }
        public abstract string name {get; }
        public virtual UIElement process(Function f)
        {
            if (f == null) return null;

            ChartPlotter plotter = new ChartPlotter();

            LinkedList<double> x = new LinkedList<double>(), y = new LinkedList<double>();

            Function processedFunction = processFunction(f);

            for (double _x = processedFunction.minX; _x < processedFunction.maxX + processedFunction.step / 2; _x += processedFunction.step)
            {
                x.AddLast(_x);
                y.AddLast(processedFunction.getValue(_x));
            }

            var xDataSource = x.AsXDataSource();
            var yDataSource = y.AsYDataSource();

            CompositeDataSource compositeDataSource = xDataSource.Join(yDataSource);            
            
            plotter.AddLineGraph(compositeDataSource, System.Windows.Media.Colors.Blue, 3, title);              

            return (UIElement)plotter;
        }

        public void initialize()
        {
            return;
        }

        protected abstract Function processFunction(Function f);

        public IList<Parameter> getParametersList()
        {
            return new List<Parameter>();
        }

        public IList<string> checkParametersList(IList<Object> parameters)
        {
            return new List<string>();
        }

        public void setup(IList<Object> parameters)
        {
            return;
        }
    }
}

